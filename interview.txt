1、开发中Java用了比较多的数据结构有哪些？
2谈谈你对HashMap的理解，底层原理的基本实现，HashMap怎么解决碰撞问题的？
这些数据结构中是线程安全的吗？假如你回答HashMap是线程安全的，接着问你有没有线程安全的map，接下来问了conurren包。
3、对JVM熟不熟悉？简单说说类加载过程，里面执行的哪些操作?问了GC和内存管理，平时在tomect里面有没有进行过相关的配置
4、然后问了http协议，get和post的基本区别，接着tcp/ip协议，三次握手，窗口滑动机制。
5、开发中用了那些数据库？回答mysql，储存引擎有哪些？然后问了我悲观锁和乐观锁问题使用场景、分布式集群实现的原理。
6、然后问了我springmvc和mybatis的工作原理，有没有看过底层源码？


1、Dubbo超时重试；Dubbo超时时间设置
2、如何保障请求执行顺序
3、分布式事物与分布式锁（扣款不要出现负数）
4、分布式session设置
5、执行某操作，前50次成功，第51次失败a全部回滚b前50次提交第51次抛异常，ab场景分别如何设置Spring（传播性）
6、Zookeeper有哪些用
7、JVM内存模型
8、数据库垂直和水平拆分
9、MyBatis如何分页；如何设置缓存；MySQL分页
10、熟悉IO么？与NIO的区别，阻塞与非阻塞的区别
11、分布式session一致性
12、分布式接口的幂等性设计「不能重复扣款」


1、最近做的比较熟悉的项目是哪个？画一下项目技术架构图
2、JVM老年代和新生代的比例？
3、YGC和FGC发生的具体场景
4、jstack，jmap，jutil分别的意义？如何线上排查JVM的相关问题？
5、线程池的构造类的方法的5个参数的具体意义？
6、单机上一个线程池正在处理服务如果忽然断电该怎么办？（正在处理和阻塞队列里的请求怎么处理）？
7、使用无界阻塞队列会出现什么问题？
8、接口如何处理重复请求？
9、具体处理方案是什么？
10、如何保证共享变量修改时的原子性？
11、设计一个对外服务的接口实现类，在1,2,3这三个主机（对应不同IP）上实现负载均衡和顺序轮询机制（考虑并发）

初级开发而言，需要让面试官感觉出如下的要点。
1. 熟悉SSM架构，至少在项目里做过。
这个的说法是，介绍项目时，用一个业务流程来说spring mvc如何做的。
2. 知道Spring MVC中的细节，比如@Autowired的用法，如何把url映射到Controller上，ModelAndView对象返回的方式等。
3. 最好结合项目的用法，说下你是怎么用AOP，拦截器的，比如说可以通过拦截器拦截非法请求，怎么用 AOP输出日志等。
4. 关于ORM方面，不限用过哪种，但得知道一对一，一多多，多对多等的用法，以及cascade和inverse的用法。
5. 最好知道声明式事务的做法。
如果你要应聘高级开发，那在上述基础上，最好了解如下的知识点：
Spring Bean的周期
最好能通过阅读源代码，说下IOC,AOP以及Spring MVC的工作流程
最好能结合反射，说下IOC等的实现原理
Spring Boot和Spring Cloud的一些知识点

不少候选人会看很多SQL的技巧，比如select该怎么写，insert又该怎么写，但仅限于此，不会再准备其它的。
这样就很吃亏，因为面试官会认为，哪怕是初级开发，SQL语句也该会写，所以这块不会多问，而会问如下方面的问题。
1. 索引怎么建的，怎么用的？比如我建好了一个索引，在where 语句里写 name like '123%'会不会走索引，怎么情况下不该建索引，哪些语句不会走索引。
2. 除了索引之外，你有过哪些SQL优化方面的经验，比如分库分表，或通过执行计划查看SQL的优化点。这最好是能结合你做的项目实际来讲。
这里，我面试下来，大概有70%的候选人只知道基本SQL的写法，所以哪怕你是只有理论经验，会说一些优化点，也是非常有利的。
这块对于高级开发而言，更得了解优化方面的技能。

这块是基础，其实很多问的问题，候选人一定会在项目里用到，但很少能说好说全。
这块主要会从集合，多线程，异常处理流程以及JVM虚拟机这些方面来问。
集合方面：
1. hashcode有没有重写过？在什么场景下需要重写。如果可以，结合hash表的算法，说下hashmap的实现原理。
对于高级开发而言，最好通过ConcurrentHashMap来说明下并发方面的底层实现代码。
2. ArrayList，LinkedList的差别，比如一个基于数组，一个基于链表，它们均是线程不安全的，ArrayList的扩容做法等。
对于高级而言，最好看下底层的代码。
3. Set如何实现防重的，比如TreeSet和HashSet等。
4. Collection的一些方法，比如比较方法，包装成线程安全的方法等。
5. 可能有些面试官会问，如何通过ArrayList实现队列或堆栈，这个可以准备下。
多线程方面，其实在项目里不怎么会用到，但会问如下的问题：
1. synchronized和可重入锁的差别，然后可能会顺便问下信号量等防并发的机制。
2. 在线程里该如何返回值，其实就是callable runnable 区别。
3. 一定得通过ThreadLocal或volatile关键字，来说明线程的内存模型。
4. 线程池方面，会用，了解些常用参数
线程方面，可能问得比较多的就是并发机制，如果是高级开发，可能会问得深些。
虚拟机方面
1. 结构图和流程可以大致说下。
2. 一定得了解针对堆的垃圾回收机制，具体而言，可以画个图，说下年轻代年老代等。
3. 说下垃圾回收的流程，然后针对性地说下如何在代码中优化内存性能。
4. 最好说下如果出现了OOM异常，该怎么排查？如何看Dump文件。
5. GC的一些概念，比如强弱软引用，finalize方法等，这些可以准备下。

1. 能证明自己可以干活（这不难），同时能结合底层代码说出IOC，AOP或Spring MVC的流程，只要能说出一个即可。或者能说出拦截器，Controller等的高级用法。
2. 能证明自己有Spring Boot或Spring Cloud的经验，比如能说出些Spring Cloud组件的用法。
3. 如果能证明自己有分布式开发的经验，那最好了，其实这不难证明，比如能说出服务的包是放在多台机器上（大多数公司其实都这样），而且能说出如何部署，如何通过nginx等做到负载均衡。
数据库方面，其实讲清楚一个问题即可：如何进行SQL调优，比如通过索引，看执行计划即可，如果有其它的优化点，说清楚即可。
Java Core方面，这里给出些诀窍：
1. 能结合ConcurrentHashMap的源代码，说出final,volatile,transient的用法，以及在其中如何用Lock对象防止写并发。
2. 结合一个项目实际，说下设计模式的实践。
3. 多线程方面，能说出Lock或volatile等高级知识点的用法。
4. 这块最取巧：说下GC的流程，以及如何通过日志和Dump文件排查OOM异常，如果再高级些的话，说下如何在代码中优化内存代码。


一、数据结构与算法基础
说一下几种常见的排序算法和分别的复杂度。
用Java写一个冒泡排序算法
描述一下链式存储结构。
如何遍历一棵二叉树？
倒排一个LinkedList。
用Java写一个递归遍历目录下面的所有文件。
二、Java基础
接口与抽象类的区别？
Java中的异常有哪几类？分别怎么使用？
常用的集合类有哪些？比如List如何排序？
ArrayList和LinkedList内部的实现大致是怎样的？他们之间的区别和优缺点？
内存溢出是怎么回事？请举一个例子？
==和equals的区别？
hashCode方法的作用？
NIO是什么？适用于何种场景？
HashMap实现原理，如何保证HashMap的线程安全？
JVM内存结构，为什么需要GC？
NIO模型，select/epoll的区别，多路复用的原理
Java中一个字符占多少个字节，扩展再问int, long, double占多少字节
创建一个类的实例都有哪些办法？
final/finally/finalize的区别？
Session/Cookie的区别？
String/StringBuffer/StringBuilder的区别，扩展再问他们的实现？
Servlet的生命周期？
如何用Java分配一段连续的1G的内存空间？需要注意些什么？
Java有自己的内存回收机制，但为什么还存在内存泄露的问题呢？
什么是java序列化，如何实现java序列化?(写一个实例)？
String s = new String("abc");创建了几个 String Object?
三、JVM
JVM堆的基本结构。
JVM的垃圾算法有哪几种？CMS垃圾回收的基本流程？
JVM有哪些常用启动参数可以调整，描述几个？
如何查看JVM的内存使用情况？
Java程序是否会内存溢出，内存泄露情况发生？举几个例子。
你常用的JVM配置和调优参数都有哪些？分别什么作用？
JVM的内存结构？
常用的GC策略，什么时候会触发YGC，什么时候触发FGC？
四、多线程/并发
如何创建线程？如何保证线程安全？
如何实现一个线程安全的数据结构
如何避免死锁
Volatile关键字的作用？
HashMap在多线程环境下使用需要注意什么？为什么？
Java程序中启动一个线程是用run()还是start()？
什么是守护线程？有什么用？
什么是死锁？如何避免
线程和进程的差别是什么？
Java里面的Threadlocal是怎样实现的？
ConcurrentHashMap的实现原理是？
sleep和wait区别
notify和notifyAll区别
volatile关键字的作
ThreadLocal的作用与实现
两个线程如何串行执行
上下文切换是什么含义
可以运行时kill掉一个线程吗？
什么是条件锁、读写锁、自旋锁、可重入锁？
线程池ThreadPoolExecutor的实现原理？
五、Linux使用与问题分析排查
使用两种命令创建一个文件？
硬链接和软链接的区别？
Linux常用命令有哪些？
怎么看一个Java线程的资源耗用？
Load过高的可能性有哪些？
/etc/hosts文件什么做用？
如何快速的将一个文本中所有“abc”替换为“xyz”？
如何在log文件中搜索找出error的日志？
发现磁盘空间不够，如何快速找出占用空间最大的文件？
Java服务端问题排查（OOM，CPU高，Load高，类冲突）
Java常用问题排查工具及用法（top, iostat, vmstat, sar, tcpdump, jvisualvm, jmap, jconsole）
Thread dump文件如何分析（Runnable，锁，代码栈，操作系统线程ID关联）
如何查看Java应用的线程信息？
六、框架使用
描述一下Hibernate的三个状态？
Spring中Bean的生命周期。
SpringMVC或Struts处理请求的流程。
Spring AOP解决了什么问题？怎么实现的？
Spring事务的传播属性是怎么回事？它会影响什么？
Spring中BeanFactory和FactoryBean有什么区别？
Spring框架中IOC的原理是什么？
spring的依赖注入有哪几种方式
struts工作流程
用Spring如何实现一个切面？
Spring 如何实现数据库事务？
Hibernate对一二级缓存的使用，Lazy-Load的理解；
mybatis如何实现批量提交？
七、数据库相关
MySQL InnoDB、Mysaim的特点？
乐观锁和悲观锁的区别？
数据库隔离级别是什么？有什么作用？
MySQL主备同步的基本原理。
select * from table t where size > 10 group by size order by size的sql语句执行顺序？
查询语句中select from where group by having order by的执行顺序
1.查询中用到的关键词主要包含六个，并且他们的顺序依次为 
select--from--where--group by--having--order by 
其中select和from是必须的，其他关键词是可选的，这六个关键词的执行顺序 
与sql语句的书写顺序并不是一样的，而是按照下面的顺序来执行 
from--where--group by--having--select--order by, 
from:需要从哪个数据表检索数据  
where:过滤表中数据的条件 
group by:如何将上面过滤出的数据分组 
having:对上面已经分组的数据进行过滤的条件 
select:查看结果集中的哪个列，或列的计算结果 
order by :按照什么样的顺序来查看返回的数据  
2.from后面的表关联，是自右向左解析的 
而where条件的解析顺序是自下而上的。 
也就是说，在写SQL文的时候，尽量把数据量小的表放在最右边来进行关联（用小表去匹配大表）， 
而把能筛选出小量数据的条件放在where语句的最左边 （用小表去匹配大表）
如何优化数据库性能（索引、分库分表、批量操作、分页算法、升级硬盘SSD、业务优化、主从部署）
SQL什么情况下不会使用索引（不包含，不等于，函数）
一般在什么字段上建索引（过滤数据最多的字段）
如何从一张表中查出name字段不包含“XYZ”的所有行？
MySQL，B+索引实现，行锁实现，SQL优化
Redis，RDB和AOF，如何做高可用、集群
如何解决高并发减库存问题
mysql存储引擎中索引的实现机制；
数据库事务的几种粒度；
行锁，表锁；乐观锁，悲观锁
八、网络协议和网络编程
TCP建立连接的过程。
TCP断开连接的过程。
浏览器发生302跳转背后的逻辑？
HTTP协议的交互流程。HTTP和HTTPS的差异，SSL的交互流程？
Rest和Http什么关系？ 大家都说Rest很轻量，你对Rest风格如何理解？
TCP的滑动窗口协议有什么用？讲讲原理。
HTTP协议都有哪些方法？
交换机和路由器的区别？
Socket交互的基本流程？
http协议（报文结构，断点续传，多线程下载，什么是长连接）
tcp协议（建连过程，慢启动，滑动窗口，七层模型）
webservice协议（wsdl/soap格式，与rest协议的区别）
NIO的好处，Netty线程模型，什么是零拷贝
九、Redis等缓存系统/中间件/NoSQL/一致性Hash等
列举一个常用的Redis客户端的并发模型。
HBase如何实现模糊查询？
列举一个常用的消息中间件，如果消息要保序如何实现？
如何实现一个Hashtable？你的设计如何考虑Hash冲突？如何优化？
分布式缓存，一致性hash
LRU算法，slab分配，如何减少内存碎片
如何解决缓存单机热点问题
什么是布隆过滤器，其实现原理是？ False positive指的是？
memcache与redis的区别
zookeeper有什么功能，选举算法如何进行
map/reduce过程，如何用map/reduce实现两个数据源的联合统计

十、设计模式与重构
你能举例几个常见的设计模式
你在设计一个工厂的包的时候会遵循哪些原则？
你能列举一个使用了Visitor/Decorator模式的开源项目/库吗？
你在编码时最常用的设计模式有哪些？在什么场景下用？
如何实现一个单例？
代理模式（动态代理）
单例模式（懒汉模式，并发初始化如何解决，volatile与lock的使用）
JDK源码里面都有些什么让你印象深刻的设计模式使用，举例看看？



二、Java多线程
线程池的原理，为什么要创建线程池？创建线程池的方式；
线程的生命周期，什么时候会出现僵死进程；
说说线程安全问题，什么实现线程安全，如何实现线程安全；
创建线程池有哪几个核心参数？ 如何合理配置线程池的大小？
volatile、ThreadLocal的使用场景和原理；
ThreadLocal什么时候会出现OOM的情况？为什么？
synchronized、volatile区别、synchronized锁粒度、模拟死锁场景、原子性与可见性；
三、JVM相关
JVM内存模型，GC机制和原理；
GC分哪两种，Minor GC 和Full GC有什么区别？什么时候会触发Full GC？分别采用什么算法？
JVM里的有几种classloader，为什么会有多种？
什么是双亲委派机制？介绍一些运作过程，双亲委派模型的好处；
什么情况下我们需要破坏双亲委派模型；
常见的JVM调优方法有哪些？可以具体到调整哪个参数，调成什么值？
JVM虚拟机内存划分、类加载器、垃圾收集算法、垃圾收集器、class文件结构是如何解析的；
四、Java扩展篇
红黑树的实现原理和应用场景；
NIO是什么？适用于何种场景？
Java9比Java8改进了什么；
HashMap内部的数据结构是什么？底层是怎么实现的？（还可能会延伸考察ConcurrentHashMap与HashMap、HashTable等，考察对技术细节的深入了解程度）；
说说反射的用途及实现，反射是不是很慢，我们在项目中是否要避免使用反射；
说说自定义注解的场景及实现；
List 和 Map 区别，Arraylist 与 LinkedList 区别，ArrayList 与 Vector 区别；
五、Spring相关
Spring AOP的实现原理和场景？
Spring bean的作用域和生命周期；
Spring Boot比Spring做了哪些改进？ Spring 5比Spring4做了哪些改进；
如何自定义一个Spring Boot Starter？
Spring IOC是什么？优点是什么？
SpringMVC、动态代理、反射、AOP原理、事务隔离级别；
六、中间件篇
Dubbo完整的一次调用链路介绍；
Dubbo支持几种负载均衡策略？
Dubbo Provider服务提供者要控制执行并发请求上限，具体怎么做？
Dubbo启动的时候支持几种配置方式？
了解几种消息中间件产品？各产品的优缺点介绍；
消息中间件如何保证消息的一致性和如何进行消息的重试机制？
Spring Cloud熔断机制介绍；
Spring Cloud对比下Dubbo，什么场景下该使用Spring Cloud？
七、数据库篇
锁机制介绍：行锁、表锁、排他锁、共享锁；
乐观锁的业务场景及实现方式；
事务介绍，分布式事物的理解，常见的解决方案有哪些，什么事两阶段提交、三阶段提交；
MySQL记录binlog的方式主要包括三种模式？每种模式的优缺点是什么？
MySQL锁，悲观锁、乐观锁、排它锁、共享锁、表级锁、行级锁；
分布式事务的原理2阶段提交，同步\异步\阻塞\非阻塞；
数据库事务隔离级别，MySQL默认的隔离级别、Spring如何实现事务、JDBC如何实现事务、嵌套事务实现、分布式事务实现；
SQL的整个解析、执行过程原理、SQL行转列；
八、Redis
Redis为什么这么快？redis采用多线程会有哪些问题？
Redis支持哪几种数据结构；
Redis跳跃表的问题；
Redis单进程单线程的Redis如何能够高并发?
Redis如何使用Redis实现分布式锁？
Redis分布式锁操作的原子性，Redis内部是如何实现的？

1）请简单解释算法是什么？
算法是一个定义良好的计算过程，它将一些值作为输入并产生相应的输出值。简单来说，它是将输入转换为输出的一系列计算步骤。
2）解释什么是快速排序算法？
快速排序算法能够快速排序列表或查询。它基于分割交换排序的原则，这种类型的算法占用空间较小，它将待排序列表分为三个主要部分：
小于Pivot的元素
枢轴元素Pivot（选定的比较值）
大于Pivot的元素
3）解释算法的时间复杂度？
算法的时间复杂度表示程序运行完成所需的总时间，它通常用大O表示法来表示。
4）请问用于时间复杂度的符号类型是什么？
用于时间复杂度的符号类型包括：
Big Oh：它表示小于或等于目标多项式
Big Omega：它表示大于或等于目标多项式
Big Theta：它表示与目标多项式相等
Little Oh：它表示小于目标多项式
Little Omega：它表示大于目标多项式
5）解释二分法检索如何工作？
在二分法检索中，我们先确定数组的中间位置，然后将要查找的值与数组中间位置的值进行比较，若小于数组中间值，则要查找的值应位于该中间值之前，依此类推，不断缩小查找范围，直至得到最终结果。
6）解释是否可以使用二分法检索链表？
由于随机访问在链表中是不可接受的，所以不可能到达O（1）时间的中间元素。因此，对于链表来说，二分法检索是不可以的（对顺序链表或排序后的链表是可以用的）。
7）解释什么是堆排序？
堆排序可以看成是选择排序的改进，它可以定义为基于比较的排序算法。它将其输入划分为未排序和排序的区域，通过不断消除最小元素并将其移动到排序区域来收缩未排序区域。
8）说明什么是Skip list？
Skip list数据结构化的方法，它允许算法在符号表或字典中搜索、删除和插入元素。在Skip list中，每个元素由一个节点表示。搜索函数返回与key相关的值的内容。插入操作将指定的键与新值相关联，删除操作可删除指定的键。
9）解释插入排序算法的空间复杂度是多少？
插入排序是一种就地排序算法，这意味着它不需要额外的或仅需要少量的存储空间。对于插入排序，它只需要将单个列表元素存储在初始数据的外侧，从而使空间复杂度为O（1）。
10）解释什么是“哈希算法”，它们用于什么？
“哈希算法”是一个哈希函数，它使用任意长度的字符串，并将其减少为唯一的固定长度字符串。它用于密码有效性、消息和数据完整性以及许多其他加密系统。
11）解释如何查找链表是否有循环？
要知道链表是否有循环，我们将采用两个指针的方法。如果保留两个指针，并且在处理两个节点之后增加一个指针，并且在处理每个节点之后，遇到指针指向同一个节点的情况，这只有在链表有循环时才会发生。
12）解释加密算法的工作原理？
加密是将明文转换为称为“密文”的密码格式的过程。要转换文本，算法使用一系列被称为“键”的位来进行计算。密钥越大，创建密文的潜在模式数越多。大多数加密算法使用长度约为64到128位的固定输入块，而有些则使用流方法。
13）列出一些常用的加密算法？
一些常用的加密算法是：
3-way
Blowfish
CAST
CMEA
GOST
DES 和Triple DES
IDEA
LOKI等等
14）解释一个算法的最佳情况和最坏情况之间有什么区别？
·最佳情况：算法的最佳情况解释为算法执行最佳的数据排列。例如，我们进行二分法检索，如果目标值位于正在搜索的数据中心，则这就是最佳情况，最佳情况时间复杂度为0。
·最差情况：给定算法的最差输入参考。例如快速排序，如果选择关键值的子列表的最大或最小元素，则会导致最差情况出现，这将导致时间复杂度快速退化到O（n2）。
15）解释什么是基数排序算法？
基数排序又称“桶子法”，是通过比较数字将其分配到不同的“桶里”来排序元素的。它是线性排序算法之一。
16）解释什么是递归算法？
递归算法是一个解决复杂问题的方法，将问题分解成较小的子问题，直到分解的足够小，可以轻松解决问题为止。通常，它涉及一个调用自身的函数。
17）提到递归算法的三个定律是什么？
所有递归算法必须遵循三个规律
递归算法必须有一个基点
递归算法必须有一个趋向基点的状态变化过程
递归算法必须自我调用
18）解释什么是冒泡排序算法？
冒泡排序算法也称为下沉排序。在这种类型的排序中，要排序的列表的相邻元素之间互相比较。如果它们按顺序排列错误，将交换值并以正确的顺序排列，直到最终结果“浮”出水面。

2018.12.4记录
hashcode相等两个类一定相等吗?equals呢?相反呢?
介绍一下集合框架?
hashmap hastable 底层实现什么区别?hashtable和concurrenthashtable呢?
hashmap和treemap什么区别?低层数据结构是什么?
线程池用过吗都有什么参数?底层如何实现的?
sychnized和Lock什么区别?sychnize 什么情况情况是对象锁? 什么时候是全局锁为什么?
ThreadLocal 是什么底层如何实现?写一个例子呗?
volitile的工作原理?
cas知道吗如何实现的?
请用至少四种写法写一个单例模式?
请介绍一下JVM内存模型??用过什么垃圾回收器都说说呗
线上发送频繁full gc如何处理? CPU 使用率过高怎么办?
如何定位问题?如何解决说一下解决思路和处理方法
知道字节码吗?字节码都有哪些?Integer x =5,int y =5，比较x =y 都经过哪些步骤?
讲讲类加载机制呗都有哪些类加载器，这些类加载器都加载哪些文件?
手写一下类加载Demo
知道osgi吗? 他是如何实现的???
请问你做过哪些JVM优化?使用什么方法达到什么效果???
classforName("java.lang.String")和String classgetClassLoader() LoadClass("java.lang.String") 什么区别啊?
探查Tomcat的运行机制即框架？
分析Tomcat线程模型？
Tomcat系统参数认识和调优？
MySQL底层B+Tree机制？
SQL执行计划详解？
索引优化详解？
SQL语句如如如何优化？
spring都有哪些机制啊AOP底层如何实现的啊IOC呢??
cgLib知道吗?他和jdk动态代理什么区别?手写一个jdk动态代理呗?
使用mysq1索引都有哪些原则? ?索引什么数据结构? 3+tree 和B tree 什么区别?
MySQL有哪些存储引擎啊?都有啥区别? 要详细!
设计高并发系统数据库层面该怎么设计??数据库锁有哪些类型?如何实现呀?
数据库事务有哪些?
如何设计可以动态扩容缩容的分库分表方案?
用过哪些分库分表中间件，有啥优点和缺点?讲一下你了解的分库分表中间件的底层实现原理?
我现在有一个未分库分表的系统，以后系统需分库分表，如何设计，让未分库分表的系统动态切换到分库分表的系统上?TCC? 那若出现网络原因，网络连不通怎么办啊?
分布式事务知道吗? 你们怎么解决的?
为什么要分库分表啊?
RPC通信原理，分布式通信原理
分布式寻址方式都有哪些算法知道一致性hash吗?手写一下java实现代码??你若userId取摸分片，那我要查一段连续时间里的数据怎么办???
如何解决分库分表主键问题有什么实现方案??
redis和memcheched 什么区别为什么单线程的redis比多线程的memched效率要高啊?
redis有什么数据类型都在哪些场景下使用啊?
reids的主从复制是怎么实现的redis的集群模式是如何实现的呢redis的key是如何寻址的啊?
使用redis如何设计分布式锁?使用zk可以吗?如何实现啊这两种哪个效率更高啊??
知道redis的持久化吗都有什么缺点优点啊? ?具体底层实现呢?
redis过期策略都有哪些LRU 写一下java版本的代码吧??
说一下dubbo的实现过程注册中心挂了可以继续通信吗??
dubbo支持哪些序列化协议?hessian 说一下hessian的数据结构PB知道吗为啥PB效率是最高的啊??
知道netty吗'netty可以干嘛呀NIO,BIO,AIO 都是什么啊有什么区别啊?
dubbo复制均衡策略和高可用策略都有哪些啊动态代理策略呢?
为什么要进行系统拆分啊拆分不用dubbo可以吗'dubbo和thrift什么区别啊?
为什么使用消息队列啊消息队列有什么优点和缺点啊?
如何保证消息队列的高可用啊如何保证消息不被重复消费啊
kafka ，activemq,rabbitmq ，rocketmq都有什么优点，缺点啊???
如果让你写一个消息队列，该如何进行架构设计啊?说一下你的思路
说一下TCP 'IP四层?
http的工作流程?? ?http1.0 http1.1http2.0 具体哪些区别啊?
TCP三次握手，四层分手的工作流程画一下流程图为什么不是四次五次或者二次啊?
画一下https的工作流程?具体如何实现啊?如何防止被抓包啊??
源码中所用到的经典设计思想及常用设计模式
系统架构如何选择合适日志技术（log4j、log4j2、slf4j、jcl…….）
springAOP的原理，springAOP和Aspectj的关系，springAOP的源码问题
dubbo框架的底层通信原理
RPC通信原理，分布式通信原理
如何利用springCloud来架构微服务项目
如何正确使用docker技术
springMVC的底层原理、如何从源码来分析其原理
mybaits的底层实现原理，如何从源码来分析mybaits
mysql的索引原理，索引是怎么实现的
索引的底层算法、如何正确使用、优化索引
springboot如何快速构建系统
zk原理知道吗zk都可以干什么Paxos算法知道吗?说一下原理和实现?
如果让你写一个消息队列，该如何进行架构设计啊?说一下你的思路
分布式事务知道吗? 你们怎么解决的?
请问你做过哪些JVM优化?使用什么方法达到什么效果?

多线程
java中有几种方法可以实现一个线程？
继承Thread类；
实现Runnable接口；
实现Callable接口通过FutureTask包装器来创建Thread线程；
使用ExecutorService、Callable、Future实现有返回结果的多线程（也就是使用了ExecutorService来管理前面的三种方式）。
详情参见： 
https://radiancel.github.io/2018/08/02/Multithreading/
如何停止一个正在运行的线程？
1、使用退出标志，使线程正常退出，也就是当run方法完成后线程终止。 2、使用stop方法强行终止，但是不推荐这个方法，因为stop和suspend及resume一样都是过期作废的方法。 3、使用interrupt方法中断线程。
参考： 
https://www.cnblogs.com/greta/p/5624839.html
notify()和notifyAll()有什么区别？
如果线程调用了对象的 wait()方法，那么线程便会处于该对象的等待池中，等待池中的线程不会去竞争该对象的锁。
当有线程调用了对象的 notifyAll()方法（唤醒所有 wait 线程）或 notify()方法（只随机唤醒一个 wait 线程），被唤醒的的线程便会进入该对象的锁池中，锁池中的线程会去竞争该对象锁。也就是说，调用了notify后只要一个线程会由等待池进入锁池，而notifyAll会将该对象等待池内的所有线程移动到锁池中，等待锁竞争。
优先级高的线程竞争到对象锁的概率大，假若某线程没有竞争到该对象锁，它还会留在锁池中，唯有线程再次调用 wait()方法，它才会重新回到等待池中。而竞争到对象锁的线程则继续往下执行，直到执行完了 synchronized 代码块，它会释放掉该对象锁，这时锁池中的线程会继续竞争该对象锁。
参考： 
再谈notify和notifyAll的区别和相同
sleep()和 wait()有什么区别?
对于sleep()方法，我们首先要知道该方法是属于Thread类中的。而wait()方法，则是属于Object类中的。
sleep()方法导致了程序暂停执行指定的时间，让出cpu该其他线程，但是他的监控状态依然保持者，当指定的时间到了又会自动恢复运行状态。在调用sleep()方法的过程中，线程不会释放对象锁。
当调用wait()方法的时候，线程会放弃对象锁，进入等待此对象的等待锁定池，只有针对此对象调用notify()方法后本线程才进入对象锁定池准备，获取对象锁进入运行状态。
参考： 
https://www.cnblogs.com/hongten/p/hongtenjavasleep_wait.html
什么是Daemon线程？它有什么意义？
Java语言自己可以创建两种进程“用户线程”和“守护线程”
用户线程：就是我们平时创建的普通线程.
守护线程：主要是用来服务用户线程.
Daemon就是守护线程，他的意义是：
只要当前JVM实例中尚存在任何一个非守护线程没有结束，守护线程就全部工作；只有当最后一个非守护线程结束时，守护线程随着JVM一同结束工作。
Daemon的作用是为其他线程的运行提供便利服务，守护线程最典型的应用就是 GC (垃圾回收器)，它就是一个很称职的守护者。
参考： 
https://www.cnblogs.com/ChrisWang/archive/2009/11/28/1612815.html
java如何实现多线程之间的通讯和协作？
参考这篇： 
http://www.cnblogs.com/hapjin/p/5492619.html
锁
什么是可重入锁（ReentrantLock）？
线程可以进入任何一个它已经拥有的锁所同步着的代码块。
代码设计如下：
public class Lock{
   boolean isLocked = false;  
   Thread lockedBy = null;
   int lockedCount = 0;
   public synchronized void lock() throws InterruptedException{
       Thread thread = Thread.currentThread();
       while(isLocked && lockedBy != thread){
           wait();
       }
       isLocked = true;
       lockedCount++;
       lockedBy = thread;   
   }
   public synchronized void unlock(){       
       if(Thread.currentThread() == this.lockedBy){
           lockedCount--;           
           if(lockedCount == 0){
               isLocked = false;
               notify();
           }
       }
   }
}
参考链接： 
https://www.cnblogs.com/dj3839/p/6580765.html
当一个线程进入某个对象的一个synchronized的实例方法后，其它线程是否可进入此对象的其它方法？

如果其他方法前加了synchronized关键字，就不能，如果没加synchronized，则能够进去。
如果这个方法内部调用了wait(),则可以进入其他加synchronized的方法。
如果其他方法加了synchronized关键字，并且没有调用wai方法，则不能。
ynchronized和java.util.concurrent.locks.Lock的异同？
主要相同点：Lock能完成Synchronized所实现的所有功能。
主要不同点：Lock有比Synchronized更精确的线程予以和更好的性能。Synchronized会自动释放锁，但是Lock一定要求程序员手工释放，并且必须在finally从句中释放。

乐观锁和悲观锁的理解及如何实现，有哪些实现方式？
乐观锁是假设每次操作都不会冲突，若是遇到冲突失败就重试直到成功；悲观锁是让其他线程都等待，等锁释放完了再竞争锁。
乐观锁实现方式：cas，volatile
悲观锁实现方式：synchronized，Lock

并发框架
SynchronizedMap和ConcurrentHashMap有什么区别？
SynchronizedMap()和Hashtable一样，实现上在调用map所有方法时，都对整个map进行同步。而ConcurrentHashMap的实现却更加精细，它对map中的所有桶加了锁。所以，只要有一个线程访问map，其他线程就无法进入map，而如果一个线程在访问ConcurrentHashMap某个桶时，其他线程，仍然可以对map执行某些操作。
所以，ConcurrentHashMap在性能以及安全性方面，明显比Collections.synchronizedMap()更加有优势。同时，同步操作精确控制到桶，这样，即使在遍历map时，如果其他线程试图对map进行数据修改，也不会抛出ConcurrentModificationException。
参考： 
https://www.cnblogs.com/shamo89/p/6700353.html
CopyOnWriteArrayList可以用于什么应用场景？
CopyOnWriteArrayList的特性是针对读操作，不做处理，和普通的ArrayList性能一样。而在写操作时，会先拷贝一份，实现新旧版本的分离，然后在拷贝的版本上进行修改操作，修改完后，将其更新至就版本中。
那么他的使用场景就是：一个需要在多线程中操作，并且频繁遍历。其解决了由于长时间锁定整个数组导致的性能问题，解决方案即写时拷贝。
另外需要注意的是CopyOnWrite容器只能保证数据的最终一致性，不能保证数据的实时一致性。所以如果你希望写入的的数据，马上能读到，请不要使用CopyOnWrite容器。
参考： 
https://www.cnblogs.com/duchanggang/p/4627082.html https://www.cnblogs.com/yw-technology/p/7476106.html
线程安全
什么叫线程安全？servlet是线程安全吗?
线程安全就是说多线程访问同一代码，不会产生不确定的结果。
在多线程环境中，当各线程不共享数据的时候，即都是私有（private）成员，那么一定是线程安全的。但这种情况并不多见，在多数情况下需要共享数据，这时就需要进行适当的同步控制了。
线程安全一般都涉及到synchronized， 就是一段代码同时只能有一个线程来操作 不然中间过程可能会产生不可预制的结果。
如果你的代码所在的进程中有多个线程在同时运行，而这些线程可能会同时运行这段代码。如果每次运行结果和单线程运行的结果是一样的，而且其他的变量的值也和预期的是一样的，就是线程安全的。
Servlet不是线程安全的，详见：漫画 | Servlet属于线程安全的吗？
同步有几种实现方法？
1.同步方法
即有synchronized关键字修饰的方法。
由于java的每个对象都有一个内置锁，当用此关键字修饰方法时，内置锁会保护整个方法。在调用该方法前，需要获得内置锁，否则就处于阻塞状态。
2.同步代码块
即有synchronized关键字修饰的语句块。
被该关键字修饰的语句块会自动被加上内置锁，从而实现同步。
3.使用特殊域变量(volatile)实现线程同步
  a.volatile关键字为域变量的访问提供了一种免锁机制，
  b.使用volatile修饰域相当于告诉虚拟机该域可能会被其他线程更新，
  c.因此每次使用该域就要重新计算，而不是使用寄存器中的值
  d.volatile不会提供任何原子操作，它也不能用来修饰final类型的变量
4.使用重入锁实现线程同步
在JavaSE5.0中新增了一个java.util.concurrent包来支持同步。ReentrantLock类是可重入、互斥、实现了Lock接口的锁，它与使用synchronized方法和快具有相同的基本行为和语义，并且扩展了其能力。
5.使用局部变量实现线程同步。
参考： 
https://www.cnblogs.com/jiansen/p/7351872.html
volatile有什么用？能否用一句话说明下volatile的应用场景？
作用是：作为指令关键字，确保本条指令不会因编译器的优化而省略，且要求每次直接读值，即不是从寄存器里取备份值，而是去该地址内存存储的值。
一句话说明volatile的应用场景：
对变量的写操作不依赖于当前值且该变量没有包含在具有其他变量的不变式中。
请说明下java的内存模型。
Java内存模型的逻辑视图
为了保证并发编程中可以满足原子性、可见性及有序性。有一个重要的概念，那就是内存模型。
为了保证共享内存的正确性（可见性、有序性、原子性），内存模型定义了共享内存系统中多线程程序读写操作行为的规范。
通过这些规则来规范对内存的读写操作，从而保证指令执行的正确性。它与处理器有关、与缓存有关、与并发有关、与编译器也有关。
它解决了 CPU 多级缓存、处理器优化、指令重排等导致的内存访问问题，保证了并发场景下的一致性、原子性和有序性。
内存模型解决并发问题主要采用两种方式：
限制处理器优化
使用内存屏障
关于主内存与工作内存之间的具体交互协议，即一个变量如何从主内存拷贝到工作内存、如何从工作内存同步到主内存之间的实现细节。
Java内存模型定义了以下八种操作来完成：
lock（锁定）：作用于主内存的变量，把一个变量标识为一条线程独占状态。
unlock（解锁）：作用于主内存变量，把一个处于锁定状态的变量释放出来，释放后的变量才可以被其他线程锁定。
read（读取）：作用于主内存变量，把一个变量值从主内存传输到线程的工作内存中，以便随后的load动作使用
load（载入）：作用于工作内存的变量，它把read操作从主内存中得到的变量值放入工作内存的变量副本中。
use（使用）：作用于工作内存的变量，把工作内存中的一个变量值传递给执行引擎，每当虚拟机遇到一个需要使用变量的值的字节码指令时将会执行这个操作。
assign（赋值）：作用于工作内存的变量，它把一个从执行引擎接收到的值赋值给工作内存的变量，每当虚拟机遇到一个给变量赋值的字节码指令时执行这个操作。
store（存储）：作用于工作内存的变量，把工作内存中的一个变量的值传送到主内存中，以便随后的write的操作。
write（写入）：作用于主内存的变量，它把store操作从工作内存中一个变量的值传送到主内存的变量中。
如果要把一个变量从主内存中复制到工作内存，就需要按顺寻地执行read和load操作，如果把变量从工作内存中同步回主内存中，就要按顺序地执行store和write操作。Java内存模型只要求上述操作必须按顺序执行，而没有保证必须是连续执行。
也就是read和load之间，store和write之间是可以插入其他指令的，如对主内存中的变量a、b进行访问时，可能的顺序是read a，read b，load b， load a。
Java内存模型还规定了在执行上述八种基本操作时，必须满足如下规则：
不允许read和load、store和write操作之一单独出现
不允许一个线程丢弃它的最近assign的操作，即变量在工作内存中改变了之后必须同步到主内存中。
不允许一个线程无原因地（没有发生过任何assign操作）把数据从工作内存同步回主内存中。
一个新的变量只能在主内存中诞生，不允许在工作内存中直接使用一个未被初始化（load或assign）的变量。即就是对一个变量实施use和store操作之前，必须先执行过了assign和load操作。
一个变量在同一时刻只允许一条线程对其进行lock操作，lock和unlock必须成对出现
如果对一个变量执行lock操作，将会清空工作内存中此变量的值，在执行引擎使用这个变量前需要重新执行load或assign操作初始化变量的值
如果一个变量事先没有被lock操作锁定，则不允许对它执行unlock操作；也不允许去unlock一个被其他线程锁定的变量。
对一个变量执行unlock操作之前，必须先把此变量同步到主内存中（执行store和write操作）。
参考： 
https://www.cnblogs.com/nexiyi/p/javamemorymodelandthread.html http://ifeve.com/java-memory-model-6/
为什么代码会重排序？

直接参考： 
https://www.cnblogs.com/toov5/p/9831696.html https://blog.csdn.net/qq_32646795/article/details/78221064
并发容器和框架
如何让一段程序并发的执行，并最终汇总结果？
使用CyclicBarrier 在多个关口处将多个线程执行结果汇总， CountDownLatch 在各线程执行完毕后向总线程汇报结果。
CountDownLatch : 一个线程(或者多个)， 等待另外N个线程完成某个事情之后才能执行。
CyclicBarrier : N个线程相互等待，任何一个线程完成之前，所有的线程都必须等待。
这样应该就清楚一点了，对于CountDownLatch来说，重点是那个“一个线程”, 是它在等待，而另外那N的线程在把“某个事情”做完之后可以继续等待，可以终止。而对于CyclicBarrier来说，重点是那N个线程，他们之间任何一个没有完成，所有的线程都必须等待。
从api上理解就是CountdownLatch有主要配合使用两个方法countDown()和await()，countDown()是做事的线程用的方法，await()是等待事情完成的线程用个方法，这两种线程是可以分开的(下面例子:CountdownLatchTest2)，当然也可以是同一组线程;CyclicBarrier只有一个方法await(),指的是做事线程必须大家同时等待，必须是同一组线程的工作。

import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

/**
* 各个线程执行完成后，主线程做总结性工作的例子
* @author xuexiaolei
* @version 2017年11月02日
*/
public class CountdownLatchTest2 {   
  private final static int THREAD_NUM = 10;   
  public static void main(String[] args) {       
    CountDownLatch lock = new CountDownLatch(THREAD_NUM);      
    ExecutorService exec = Executors.newCachedThreadPool();
      for (int i = 0; i < THREAD_NUM; i++) {           
         exec.submit(new CountdownLatchTask(lock, "Thread-"+i));       
      }       
      try {           
        lock.await();      
      }catch(InterruptedException e) {
         e.printStackTrace();       
      }
       
  System.out.println("大家都执行完成了，做总结性工作");       
  exec.shutdown();   
 }

   
static class CountdownLatchTask implements Runnable{       
  private final CountDownLatch lock;       
  private final String threadName;       
  CountdownLatchTask(CountDownLatch lock,String threadName) {
    this.lock = lock;           
    this.threadName = threadName;       
  }       
  @Override  
  public void run() {          
    System.out.println(threadName +" 执行完成");           
    lock.countDown();       
   }   
 }
}

CyclicBarrier例子：
import java.util.concurrent.*;
/**
*
* @author xuexiaolei
* @version 2017年11月02日
*/
public class CyclicBarrierTest {  

   private final static int THREAD_NUM = 10;   
   public static void main(String[] args) {       
      CyclicBarrier lock = new CyclicBarrier(THREAD_NUM, new Runnable() {           
         @Override
         public void run() {               
            System.out.println("这阶段大家都执行完成了，我总结一下，然后开始下一阶段");           
         }       
    });
       
  ExecutorService exec = Executors.newCachedThreadPool();       
  for (int i = 0; i < THREAD_NUM; i++) {           
    exec.submit(new CountdownLatchTask(lock, "Task-"+i));       
  }       
  exec.shutdown();   
}
   
static class CountdownLatchTask implements Runnable{       
  private final CyclicBarrier lock;       
  private final String threadName;       
  CountdownLatchTask(CyclicBarrier lock, String threadName) {
      this.lock = lock;           
      this.threadName = threadName;       
  }
       
  @Override
  public void run(){           
    for(int i = 0; i < 3; i++) {               
      System.out.println(threadName + " 执行完成");               
      try {                 
        lock.await();               
      } catch (BrokenBarrierException e) {
           e.printStackTrace();               
      } catch (InterruptedException e){
           e.printStackTrace();               
      }
    }       
   }   
 }
}
如何合理的配置java线程池？如CPU密集型的任务，基本线程池应该配置多大？IO密集型的任务，基本线程池应该配置多大？用有界队列好还是无界队列好？任务非常多的时候，使用什么阻塞队列能获取最好的吞吐量？
虽然Exectors可以生成一些很常用的线程池，但毕竟在什么情况下使用还是开发者最清楚的。在某些自己很清楚的使用场景下，java线程池还是推荐自己配置的。下面是java线程池的配置类的参数，我们逐一分析一下：
public ThreadPoolExecutor(int corePoolSize, int maximumPoolSize, long keepAliveTime, TimeUnit unit, BlockingQueue workQueue, 
ThreadFactory threadFactory, RejectedExecutionHandler handler)
corePoolSize - 池中所保存的线程数，包括空闲线程。
maximumPoolSize - 池中允许的最大线程数。
keepAliveTime - 当线程数大于核心时，此为终止前多余的空闲线程等待新任务的最长时间。
unit - keepAliveTime 参数的时间单位。
workQueue - 执行前用于保持任务的队列。此队列仅保持由 execute 方法提交的 Runnable 任务。用BlocingQueue的实现类都可以。
threadFactory - 执行程序创建新线程时使用的工厂。自定义线程工厂可以做一些额外的操作，比如统计生产的线程数等。
handler - 饱和策略，即超出线程范围和队列容量而使执行被阻塞时所使用的处理程序。策略有：Abort终止并抛出异常，Discard悄悄抛弃任务，Discard-Oldest抛弃最老的任务策略，Caller-Runs将任务退回给调用者策略。
至于线程池应当配置多大的问题，一般有如下的经验设置：
如果是CPU密集型应用，则线程池大小设置为N+1。
如果是IO密集型应用，则线程池大小设置为2N+1。
用有界队列好还是无界队列好？这种问题的答案肯定是视情况而定：

有界队列有助于避免资源耗尽的情况发生。但他带来了新的问题：当队列填满后，新的任务怎么办？所以有界队列适用于执行比较耗资源的任务，同时要设计好相应的饱和策略。
无界队列和有界队列刚好相反，在资源无限的情况下可以一直接收新任务。适用于小任务，请求和处理速度相对持平的状况。
其实还有一种同步移交的队列 SynchronousQueue ，这种队列不存储任务信息，直接将任务提交给线程池。可以理解为容量只有1的有界队列，在特殊场景下有特殊作用，同样得设计好相应的饱和策略。
参考：
https://blog.csdn.net/qq_34039315/article/details/78542498
如何使用阻塞队列实现一个生产者和消费者模型？请写代码。

下面这是一个完整的生产者消费者代码例子，对比传统的wait、nofity代码，它更易于理解。

ProducerConsumerPattern.java如下：

import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.logging.Level;
import java.util.logging.Logger;

public class ProducerConsumerPattern {
   public static void main(String args[]){
    //Creating shared object
    BlockingQueue sharedQueue = new LinkedBlockingQueue();
    //Creating Producer and Consumer Thread
    Thread prodThread = new Thread(new Producer(sharedQueue));
    Thread consThread = new Thread(new Consumer(sharedQueue));
    //Starting producer and Consumer thread
    prodThread.start();
    consThread.start();
   }
}
生产者，Producer.java如下：

class Producer implements
 Runnable {
   private final BlockingQueue sharedQueue;
   public Producer(BlockingQueue sharedQueue) {
       this.sharedQueue = sharedQueue;
   }
   @Override
   public void run() {
       for(int i=0; i<10; i++){
           try {
               System.out.println("Produced: " + i);
               sharedQueue.put(i);
           } catch (InterruptedException ex) {
               Logger.getLogger(Producer.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
   }
}
消费者，Consumer.java如下所示：

class Consumer implements Runnable{
   private final BlockingQueue sharedQueue;
   public Consumer (BlockingQueue sharedQueue) {
       this.sharedQueue = sharedQueue;
   }

   @Override
   public void run() {
       while(true){
           try {
               System.out.println("Consumed: "+ sharedQueue.take());
           } catch (InterruptedException ex) {
               Logger.getLogger(Consumer.class.getName()).log(Level.SEVERE, null, ex);
           }
       }
   }
}
参考： 
https://www.cnblogs.com/expiator/p/9317929.html
多读少写的场景应该使用哪个并发容器，为什么使用它？比如你做了一个搜索引擎，搜索引擎每次搜索前需要判断搜索关键词是否在黑名单里，黑名单每天更新一次。
Java中的锁
如何实现乐观锁（CAS）？如何避免ABA问题？
CAS是项乐观锁技术，当多个线程尝试使用CAS同时更新同一个变量时，只有其中一个线程能更新变量的值，而其它线程都失败，失败的线程并不会被挂起，而是被告知这次竞争中失败，并可以再次尝试。
CAS 操作包含三个操作数 —— 内存位置（V）、预期原值（A）和新值(B)。如果内存位置的值与预期原值相匹配，那么处理器会自动将该位置值更新为新值。否则，处理器不做任何操作。无论哪种情况，它都会在 CAS 指令之前返回该位置的值。（在 CAS 的一些特殊情况下将仅返回 CAS 是否成功，而不提取当前值。）CAS 有效地说明了“我认为位置 V 应该包含值 A；如果包含该值，则将 B 放到这个位置；否则，不要更改该位置，只告诉我这个位置现在的值即可。”这其实和乐观锁的冲突检查+数据更新的原理是一样的。
这里再强调一下，乐观锁是一种思想。CAS是这种思想的一种实现方式。
ABA问题:
比如说一个线程one从内存位置V中取出A，这时候另一个线程two也从内存中取出A，并且two进行了一些操作变成了B，然后two又将V位置的数据变成A，这时候线程one进行CAS操作发现内存中仍然是A，然后one操作成功。尽管线程one的CAS操作成功，但是不代表这个过程就是没有问题的。
解决方法：通过版本号（version）的方式来解决，每次比较要比较数据的值和版本号两项内容即可。
读写锁可以用于什么应用场景？
在多线程的环境下，对同一份数据进行读写，会涉及到线程安全的问题。比如在一个线程读取数据的时候，另外一个线程在写数据，而导致前后数据的不一致性；一个线程在写数据的时候，另一个线程也在写，同样也会导致线程前后看到的数据的不一致性。
这时候可以在读写方法中加入互斥锁，任何时候只能允许一个线程的一个读或写操作，而不允许其他线程的读或写操作，这样是可以解决这样以上的问题，但是效率却大打折扣了。因为在真实的业务场景中，一份数据，读取数据的操作次数通常高于写入数据的操作，而线程与线程间的读读操作是不涉及到线程安全的问题，没有必要加入互斥锁，只要在读-写，写-写期间上锁就行了。
对于以上这种情况，读写锁是最好的解决方案！其中它的实现类：ReentrantReadWriteLock--顾名思义是可重入的读写锁，允许多个读线程获得ReadLock，但只允许一个写线程获得WriteLock

读写锁的机制：
"读-读" 不互斥
"读-写" 互斥
"写-写" 互斥
参考：
https://www.cnblogs.com/liang1101/p/6475555.html
什么时候应该使用可重入锁？
可重入锁，也叫做递归锁，指的是同一线程 外层函数获得锁之后 ，内层递归函数仍然有获取该锁的代码，但不受影响。
在JAVA环境下 ReentrantLock 和synchronized 都是 可重入锁。
参考：
http://ifeve.com/javalocksee4/
什么场景下可以使用volatile替换synchronized？
状态标志：把简单地volatile变量作为状态标志，来达成线程之间通讯的目的，省去了用synchronized还要wait，notify或者interrupt的编码麻烦。
替换重量级锁：如果某个变量仅是单次读或者单次写操作，没有复合操作(i++,先检查后判断之类的)就可以用volatile替换synchronized。
并发工具
如何实现一个流控程序，用于控制请求的调用次数？
import java.util.Random;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Semaphore;

/**
* 阻塞访问的线程，直到获取了访问令牌
* @author xuexiaolei
* @version 2017年11月15日
*/
public class FlowControl2 {
   private final static int MAX_COUNT = 10;   
   private final Semaphore semaphore = new Semaphore(MAX_COUNT);
   private final ExecutorService exec = Executors.newCachedThreadPool();
   public void access(int i){
       exec.submit(new Runnable() {
           @Override
           public void run() {
               semaphore.acquireUninterruptibly();
               doSomething(i);
               semaphore.release();
           }
       });
   }
   
public void doSomething(int i){
       try{
           Thread.sleep(new Random().nextInt(100));
           System.out.println(String.format("%s 通过线程:%s 访问成功",i,Thread.currentThread().getName()));
       }catch(InterruptedException e) {
       }
   }

   public static void main(String[] args) {
       FlowControl2 web = new FlowControl2();       
       for (int i = 0; i < 2000; i++) {
           web.access(i);
       }
   }
}
